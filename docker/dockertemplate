#!/bin/bash
#
# easily use pre-made docker templates

#Core Function
dockertemplate() {
	# @description used for easily accessing pre-made docker templates
	# @param $1 option flag or template name
	# @param $... additional parameters based on command used
	# @output varies, depending on the command used

	if [ "$1" == "-l" ]; then
		templates_list
		return
	elif [ -n "$1" ]; then
		local generatefunction=0

		if [ "$1" == "-a" ]; then
			generatefunction=1
			shift
		fi

		local templatefilepath="$(templates_getfilepath $1)"

		if [ -f "${templatefilepath}" ]; then
			if [ "${generatefunction}" == "1" ]; then
				local scriptname=$(basename "${templatefilepath}")
				local templatefilepath_escaped="$(echo "${templatefilepath}" | awk '{gsub(/ /,"\\ ");print}')"

				cat "${templatefilepath}" | awk -v filePath="${templatefilepath}" '{
					if (NR == 1) {
						printf "\n# Copy the following to your bash aliases:\n"
					} else if ($1 !~ "^#.*") {
						exit
					} else {
						print
					}
				}
				END {
					gsub(/ /, "\\ ", filePath);
					print "#\n# Config file: " filePath "\n#"
				}'

				printf "${scriptname}() {\n\t${templatefilepath_escaped} \"\$@\"\n}\n\n"

			else
				"${templatefilepath}" "${@:2:${#}}"
			fi
		else
			echo "Error: Invalid template-name: $1"
		fi

		return
	fi

	echo "Usage: ${FUNCNAME[0]} [-l]			List available docker templates"
	echo "Usage: ${FUNCNAME[0]} [-a] <template-name>	Generate bash alias for using template"
	echo "Usage: ${FUNCNAME[0]} <template-name>		Use template directly"
}

#Global Variables
ldt_repo_dir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"

#Functions
templates_getfilepath() {
	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local templatedir="${repodir}/docker/templates"
	
	pushd "${templatedir}" > /dev/null
	
	local templatepaths=($(find . -mindepth 3 -type f -name "docker[a-zA-Z0-9]*" | sort))

	popd > /dev/null

	if [ -n "$1" ]; then
		for path in "${templatepaths[@]}"; do
			local templateSubPath=$(dirname ${path//.\//})
			local scriptName=$(basename ${path//.\//})

			if [ "$1" == "${templateSubPath}" ]; then
				echo "${templatedir}/${templateSubPath}/${scriptName}"
				return;
			fi
		done
	else
		echo "${templatepaths[@]}"
	fi
}

templates_list() {
	local templatepaths=($(templates_getfilepath))

	echo "List of Available templates:"
	
	for path in "${templatepaths[@]}"; do
		local templateSubPath=$(dirname ${path//.\//})

		echo "	${templateSubPath}"
	done
}

template_usage() {
	# @description organize usages and make re-usable for all dockercontainer templates
	# @output string output of usages, formatted

	local usage_options_common=(
		$(dockerbasecontainer dockerbasecontainer_options)
		$(dockercontainer dockercontainer_options)
	)

	local usage_arr=(
		"Usage: \${FUNCNAME[0]} ($(dockerutil usage_options_formatted ${usage_options_common[@]}))"
		"Usage: \${FUNCNAME[0]} $(dockerutil usage_options_formatted $(dockerbasecontainer dockerbasecontainer_options_exec)) [-d] <command>"
		"Usage: \${FUNCNAME[0]} $(dockerutil usage_options_formatted $(dockerbasecontainer dockerbasecontainer_options_logs)) [-f]"
	)
	
	dockerutil usage_display_formatted "${usage_arr[@]}"
}

#External Functions
dockerbasecontainer() {
	# @description reference dockerbasecontainer to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockerbasecontainer"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "Error: Could not load dockerbasecontainer"
		return 1
	fi
}

dockercontainer() {
	# @description reference dockercontainer to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockercontainer"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "Error: Could not load dockercontainer"
		return 1
	fi
}

dockerutil() {
	# @description reference dockerutil to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockerutil"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "Error: Could not load dockerutil"
		return 1
	fi
}

verify_external_functions() {
	# @description check if external functions can be loaded, or else exit the script
	# @output None

	if !(dockerbasecontainer > /dev/null); then dockerbasecontainer; exit 1; fi
	if !(dockercontainer > /dev/null); then dockercontainer; exit 1; fi
	if !(dockerutil > /dev/null); then dockerutil; exit 1; fi
}

#Main
if [ "$0" = "${BASH_SOURCE}" ]; then
	if [ "${LDT_DEBUG}" == "1" ]; then
		verify_external_functions
	fi

	case "$1" in
		'template_usage')
			template_usage;;
		*)
			dockertemplate "${@}"
	esac

	exit $?
fi
