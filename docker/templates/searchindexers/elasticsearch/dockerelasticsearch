#!/bin/bash
#
# docker template for Elasticsearch 2.4.4
# Hostname: localhost
# Port: 9200
# Transport-Port: 9300
#
# Shield Plugin
#    The shield plugin is disabled by default.
#
#    A default admin user is created:
#        username: liferay
#        password: liferay
#
#    A default SSL certificate is also used by shield: config/shield/keystore.jks
#        Note: The default SSL certificate is a dummy certificate for the dns name: localhost
#
#    To enable the shield plugin, run:
#        dockerelasticsearch enable_shield
#
#    To disable the shield plugin, run:
#        dockerelasticsearch disable_shield
#
# Liferay Elasticsearch Shield Adapter
#    Username: liferay
#    Password: liferay
#    
#    SSL Keystore Path: Use the default keystore provided in this script's directory: config/shield/keystore.jks
#    SSL Keystore Password: liferay
#
#    Requires Authentication: true
#    Requires SSL: true

#Core Function
dockerelasticsearch() {
	# @description create a docker container for Elasticsearch 2.4.4
	# @param $1 available commands listed in usages
	# @param $... additional parameters based on inital command used
	# @output varies, depending on the command used

	local scriptpath="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
	local scriptpath_escaped="$(echo "${scriptpath}" | awk '{gsub(/ /,"\\ ");print}')"

	# Dockerfile
	# FROM elasticsearch:2.4.4
	# 
	# Includes elasticsearch plugins used by Liferay
	# Includes shield plugin
	local dockerfile_path="./Dockerfile"
	local dockerfile_image_name="ldt_elasticsearch:latest"

	local docker_image="${dockerfile_image_name}"
	local containername="ldt_elasticsearch_244"
	local containercmd=""
	local containeroptions=(
		"-v ${scriptpath_escaped}/config/shield/roles.yml:/usr/share/elasticsearch/config/shield/roles.yml:ro"
		"-v ${scriptpath_escaped}/config/shield/keystore.jks:/usr/share/elasticsearch/config/shield/keystore.jks:ro"
		"-p 9200:9200"
		"-p 9300:9300"
	)

	local elasticsearch_options=(
		"cluster.name: LiferayElasticsearchCluster"
		"network.host: _local_"
		"network.bind_host: 0.0.0.0"
		"http.cors.enabled: true"
		"http.cors.allow-origin: \"*\""
		"http.cors.allow-headers: \"X-Requested-With, Content-Type, Content-Length, X-User\""
		"index.number_of_shards: 1"
		"index.number_of_replicas: 0"
		"path.repo: \"/usr/share/elasticsearch/data/repo\""
	)

	local elasticsearch_shield_options=(
		"shield.enabled: false"
		"shield.ssl.keystore.path: \"/usr/share/elasticsearch/config/shield/keystore.jks\""
		"shield.ssl.keystore.password: \"liferay\""
		"shield.http.ssl: true"
		"shield.transport.ssl: true"
	)

	local elasticsearch_shield_username="liferay"
	local elasticsearch_shield_password="liferay"

	if [ -n "$1" ]; then
		case "$1" in
			'enable_shield')
				if (dockercontainer 'is_running' "${containername}"); then
					if (! dockerelasticsearch 'is_shield_enabled'); then
						echo "INFO: enabling shield.."
						dockercontainer exec "${containername}" bash -c "sed -i 's/shield.enabled: false/shield.enabled: true/' config/elasticsearch.yml"
						
						echo 'INFO: restarting elasticsearch..'
						dockerelasticsearch 'restart'
					else
						echo "INFO: shield is already enabled."
					fi
				else
					echo "ERROR: Elasticsearch container is not running."
				fi;;
			'disable_shield')
				if (dockercontainer 'is_running' "${containername}"); then
					if (dockerelasticsearch 'is_shield_enabled'); then
						echo "INFO: disabling shield.."
						dockercontainer exec "${containername}" bash -c "sed -i 's/shield.enabled: true/shield.enabled: false/' config/elasticsearch.yml"
						
						echo 'INFO: restarting elasticsearch..'
						dockerelasticsearch 'restart'
					else
						echo "INFO: shield is already disabled."
					fi
				else
					echo "ERROR: elasticsearch container is not running."
				fi;;
			'is_shield_enabled')
				if (dockercontainer 'is_running' "${containername}"); then
					if [ $(dockercontainer exec "${containername}" grep -e "shield.enabled: true" config/elasticsearch.yml | wc -l) -eq 1 ]; then
						return 0
					fi
				fi

				return 1;;
			'recreate'|'run'|'start')
				local init_elastic

				if [ "$1" == 'recreate' ] || (! dockercontainer 'exists' "${containername}"); then
					init_elastic=1
				fi

				if (! (dockerutil docker_image_exists "${dockerfile_image_name}")); then
					docker build -t "${dockerfile_image_name}" "${scriptpath}"
				fi

				dockercontainer "$1" "${containername}" "${docker_image}" "${containercmd}" "${containeroptions[@]}"

				if (dockercontainer 'exists' "${containername}") && [ "${init_elastic}" == "1" ]; then
					echo 'INFO: setting up intial configuration..'

					local configuration_options=(
						"${elasticsearch_options[@]}"
						"${elasticsearch_shield_options[@]}"
					)

					local configuration_options_delimited"=$(dockerutil array_to_string_delimited '\\n' "${configuration_options[@]}")"

					dockercontainer exec "${containername}" bash -c 'awk -v options="'"${configuration_options_delimited//\"/\\\"}"'" '\''BEGIN{print options}'\'' > /usr/share/elasticsearch/config/elasticsearch.yml'
					dockercontainer exec "${containername}" mkdir /usr/share/elasticsearch/data/repo

					# Add shield user
					dockercontainer exec "${containername}" bin/shield/esusers useradd "${elasticsearch_shield_username}" -p "${elasticsearch_shield_password}" -r admin --path.conf=/usr/share/elasticsearch/config/

					# Handle shield folder permissions
					dockercontainer exec "${containername}" bash -c 'chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/config/shield > /dev/null 2>&1'

					echo 'INFO: restarting elasticsearch..'
					dockerelasticsearch 'restart'

				fi;;
			*)
				dockercontainer "$1" "${containername}" "${@:2:${#}}";;
		esac
	else
		dockerutil usage_display ${FUNCNAME[0]} "$(dockertemplate template_usage)"
		echo "Usage: ${FUNCNAME[0]} enable_shield"
		echo "Usage: ${FUNCNAME[0]} disable_shield"
	fi
}

#Global Variables
ldt_repo_dir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"

#External Functions
dockercontainer() {
	# @description reference dockercontainer to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockercontainer"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "ERROR: Could not load dockercontainer"
		return 1
	fi
}

dockertemplate() {
	# @description reference dockertemplate to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockertemplate"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "ERROR: Could not load dockertemplate"
		return 1
	fi
}

dockerutil() {
	# @description reference dockerutil to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockerutil"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "ERROR: Could not load dockerutil"
		return 1
	fi
}

verify_external_functions() {
	# @description check if external functions can be loaded, or else exit the script
	# @output None

	if !(dockercontainer > /dev/null); then dockercontainer; exit 1; fi
	if !(dockertemplate > /dev/null); then dockercontainer; exit 1; fi
	if !(dockerutil > /dev/null); then dockerutil; exit 1; fi
}

#Main
if [ "$0" = "${BASH_SOURCE}" ]; then
	if [ "${LDT_DEBUG}" == "1" ]; then
		verify_external_functions
	fi

	dockerelasticsearch "${@}"

	exit $?
fi